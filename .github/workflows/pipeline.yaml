name: Caderneta CI
on:
  pull_request:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download files from private repo
        uses: actions/checkout@v4
        with:
          repository: levyaraujo/dados
          path: test_data
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Use Python 3.12.x
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Wait for PostgreSQL
        run: for i in {1..30}; do pg_isready -h localhost -p 5432 && break || sleep 1; done

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PYTHONPATH:$(pwd)/src" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install --no-root --with dev

      - name: Run migrations
        env:
          DATABASE_URL: "postgresql://test_user:test_pass@localhost:5432/test_db"
        run: |
          poetry run alembic upgrade head

      - name: Check ruff
        run: |
          make ruff-fix

      - name: Run tests
        env:
          DATABASE_URL: "postgresql://test_user:test_pass@localhost:5432/test_db"
          CADERNETA_URL: http://localhost:8000
          ENV: testing
          PYTHONPATH: ${PWD}
          CSV_TREINAMENTO: test_data/dados_categorizados.csv
          CLASSIFIER_PATH: test_data/classifier.joblib
          VECTORIZER_PATH: test_data/vectorizer.joblib
          STATIC_URL: https://caderneta-back.tunn.dev/static
          BUCKET: /tmp/.caderneta-static
          PLANO_CADERNETA: price_1QPbFYDIhQ6ZuZkkw38co6cy
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
        run: |
          poetry run pytest -vv
