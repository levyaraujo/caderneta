name: Caderneta CI/CD
on:
  pull_request:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Python 3.12.x
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Wait for PostgreSQL
        run: for i in {1..30}; do pg_isready -h localhost -p 5432 && break || sleep 1; done

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PYTHONPATH:$(pwd)/src" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install --no-root --with dev

      - name: Run migrations
        env:
          DATABASE_URL: "postgresql://test_user:test_pass@localhost:5432/test_db"
        run: |
          poetry run alembic upgrade head

      - name: Check ruff
        run: |
          make ruff-fix

      - name: Run tests
        env:
          DATABASE_URL: "postgresql://test_user:test_pass@localhost:5432/test_db"
          CADERNETA_URL: http://localhost:8000
          ENV: testing
          PYTHONPATH: ${PWD}
          CSV_TREINAMENTO: tests/parser/test.csv
          CLASSIFIER_PATH: tests/parser/classifier.joblib
          VECTORIZER_PATH: tests/parser/vectorizer.joblib
          FRONT: https://caderneta.tunn.dev
          STATIC_URL: https://caderneta-back.tunn.dev/static
          BUCKET: /tmp/.caderneta-static
        run: |
          poetry run pytest -vv


  build:
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Build Docker image
        run: docker build -t lev0x79/caderneta .

      - name: Create SSH Key
        run: echo '${{ secrets.LIGHTSAIL_SSH_KEY }}' > lightsail_key && chmod 600 lightsail_key
      - name: Copy Docker Compose file to Lightsail
        run: scp -i lightsail_key docker-compose.yml ubuntu@${{ secrets.LIGHTSAIL_INSTANCE_IP }}:~/app/docker-compose.yml
      - name: Copy Dockerfile to Lightsail
        run: scp -i lightsail_key Dockerfile ubuntu@${{ secrets.LIGHTSAIL_INSTANCE_IP }}:~/app/Dockerfile

  deploy:
    needs: build
    runs-on: self-hosted
    timeout-minutes: 5
    steps:
      - name: Navigate to app directory
        working-directory: ~/app
        run: |
          docker compose down
          docker compose pull
          docker compose up --build -d --remove-orphans
          docker image prune -f
