name: Caderneta CI
on:
  pull_request:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Python 3.12.x
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Wait for PostgreSQL
        run: for i in {1..30}; do pg_isready -h localhost -p 5432 && break || sleep 1; done

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PYTHONPATH:$(pwd)/src" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install --no-root --with dev

      - name: Run migrations
        env:
          DATABASE_URL: "postgresql://test_user:test_pass@localhost:5432/test_db"
        run: |
          poetry run alembic upgrade head

      - name: Check ruff
        run: |
          make ruff-fix

      - name: Run tests
        env:
          DATABASE_URL: "postgresql://test_user:test_pass@localhost:5432/test_db"
          CADERNETA_URL: http://localhost:8000
          ENV: testing
          PYTHONPATH: ${PWD}
          CSV_TREINAMENTO: tests/parser/test.csv
          CLASSIFIER_PATH: tests/parser/classifier.joblib
          VECTORIZER_PATH: tests/parser/vectorizer.joblib
          FRONT: https://caderneta.tunn.dev
          STATIC_URL: https://caderneta-back.tunn.dev/static
          BUCKET: /tmp/.caderneta-static
        run: |
          poetry run pytest -vv


  build:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Check if image exists in ECR
        id: ecr-image-exists
        env:
          ECR_REPOSITORY_NAME: caderneta
          IMAGE_TAG: ${GITHUB_SHA::7}
        run: |
          if aws ecr describe-images --repository-name $ECR_REPOSITORY_NAME --image-ids imageTag=$IMAGE_TAG 2>/dev/null; then
            echo "::set-output name=exists::true"
          else
            echo "::set-output name=exists::false"
          fi

      - name: Build, tag, and push image to Amazon ECR
        if: steps.ecr-image-exists.outputs.exists == 'false'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_NAME: caderneta
          IMAGE_TAG: ${GITHUB_SHA::7}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG

  deploy:
   needs: build
   runs-on: self-hosted
   if: github.event.pull_request.merged

   steps:
   - name: Deploy to Lightsail
     working-directory: ~/caderneta/src/infra
     env:
       LIGHTSAIL_USERNAME: ${{ secrets.LIGHTSAIL_USERNAME }}
       LIGHTSAIL_HOST: ${{ secrets.LIGHTSAIL_HOST }}
       ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
       ECR_REPOSITORY_NAME: caderneta
       IMAGE_TAG: ${GITHUB_SHA::7}
     run: |
       set -e

       export CADERNETA_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG

   - name: Pull latest code
     working-directory: ~/caderneta
     run: |
       git pull origin main

   - name: Stop current containers
     working-directory: ~/caderneta/src/infra
     run: |
       docker compose down

   - name: Start new containers
     working-directory: ~/caderneta/src/infra
     run: |
       docker compose up -d

   - name: Prune unused images
     working-directory: ~/caderneta/src/infra
     run: |
       docker image prune -f

   - name: Deployment complete
     run: |
       echo "Deployment complete"
