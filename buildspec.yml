version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.12

  pre_build:
    commands:
      - echo "Rodando migrations"
      - aws s3 cp s3://caderneta-prod/.env .env
      - pip install alembic
      - alembic run upgrade head

      # Setup Docker BuildX
      - docker context create buildx-context
      - docker buildx create buildx-context --use
      - docker buildx inspect --bootstrap

  build:
    commands:
      - echo "Starting build for ARM architecture..."
      - export COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - export IMAGE_URI="${ECR}/caderneta:${COMMIT_HASH}"

      # Check if image already exists in ECR
      - |
        if aws ecr describe-images --repository-name caderneta --image-ids imageTag=$COMMIT_HASH 2>/dev/null; then
          echo "Image with tag $COMMIT_HASH already exists in ECR. Skipping build and push."
          export SKIP_BUILD=true
        else
          echo "Image not found in ECR. Proceeding with build and push..."
          export SKIP_BUILD=false
        fi
        
        # Build and push if image doesn't exist
        - |
        if [ "$SKIP_BUILD" = "false" ]; then
          echo "Logging in to ECR"
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR
        
          echo "Building and pushing Docker image for ARM64..."
          docker buildx build \
            --platform linux/arm64 \
            --provenance=false \
            --builder buildx-context \
            --push \
            --cache-from type=registry,ref=$ECR/caderneta:cache \
            --cache-to type=registry,ref=$ECR/caderneta:cache,mode=max \
            -t $IMAGE_URI \
            .
        
          if [ $? -ne 0 ]; then
            echo "Docker build and push failed"
            exit 1
          fi
        fi

  post_build:
    commands:
      - echo "Obtendo task definition atual..."
      - TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${TASK_DEFINITION_FAMILY})

      - echo "Atualizando imagem da task definition"
      - export IMAGE_URI="${ECR}/caderneta:${COMMIT_HASH}"
      - NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$IMAGE_URI" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')

      - echo "Registrando nova task definition"
      - NEW_TASK_INFO=$(aws ecs register-task-definition --region us-east-1 --cli-input-json "$NEW_TASK_DEFINITION")

      - echo "Atualizando service"
      - NEW_REVISION=$(echo $NEW_TASK_INFO | jq '.taskDefinition.revision')
      - aws ecs update-service --cluster ${ECS_CLUSTER} --service ${SERVICE_NAME} --task-definition ${TASK_DEFINITION_FAMILY}:${NEW_REVISION} --force-new-deployment --region us-east-1

artifacts:
  files:
    - docker-compose.yml
    - Dockerfile
    - '**/*'
