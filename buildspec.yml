version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.12
    commands:
      - echo "Installing Docker..."
      - apt-get update
      - apt-get install -y ca-certificates curl gnupg
      - install -m 0755 -d /etc/apt/keyrings
      - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      - chmod a+r /etc/apt/keyrings/docker.gpg
      - echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo $VERSION_CODENAME) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
      - apt-get update
      - apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
      - docker --version

  pre_build:
    commands:
      - echo "Setting up Docker..."
      - nohup dockerd &
      - sleep 5
      - docker info

  build:
    commands:
      - echo "Starting build for ARM architecture..."
      - export COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)

      # Check if image already exists in ECR
      - |
        if aws ecr describe-images --repository-name caderneta --image-ids imageTag=$COMMIT_HASH 2>/dev/null; then
          echo "Image with tag $COMMIT_HASH already exists in ECR. Skipping build and push."
        else
          echo "Image not found in ECR. Proceeding with build and push..."

          # Retrieve .env from S3
          aws s3 cp s3://caderneta-prod/.env .env

          echo "Logging in to ECR"
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR

          # Build and tag Docker image for ARM64
          docker buildx create --use
          docker buildx build --platform linux/arm64 -t caderneta .
          docker tag caderneta:latest ${ECR}/caderneta:$COMMIT_HASH

          # Push to ECR
          docker push ${ECR}/caderneta:$COMMIT_HASH
        fi

  post_build:
    commands:
      - echo "Obtendo task definition atual..."
      - TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${TASK_DEFINITION_FAMILY})

      - echo "Atualizando imagem da task definition"
      - IMAGE=$(${ECR}/caderneta/$COMMIT_HASH)
      - NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$IMAGE" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) |  del(.registeredAt)  | del(.registeredBy)')

      - echo "Registrando nova task definition"
      - NEW_TASK_INFO=$(aws ecs register-task-definition --region us-east-1 --cli-input-json "$NEW_TASK_DEFINITION")

      - echo "Atualizando service"
      - NEW_REVISION=$(echo $NEW_TASK_INFO | jq '.taskDefinition.revision')
      - aws ecs update-service --cluster ${ECS_CLUSTER} --service ${SERVICE_NAME} --task-definition ${TASK_DEFINITION_FAMILY}:${NEW_REVISION} --force-new-deployment --region us-east-1

      - echo "Deployment completed successfully."

artifacts:
  files:
    - docker-compose.yml
    - Dockerfile
    - '**/*'
