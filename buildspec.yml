version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.12
    commands:
      - echo "Installing Docker..."
      - apt-get update
      - apt-get install -y ca-certificates curl gnupg
      - install -m 0755 -d /etc/apt/keyrings
      - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      - chmod a+r /etc/apt/keyrings/docker.gpg
      - echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo $VERSION_CODENAME) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
      - apt-get update
      - apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
      - docker --version

  pre_build:
    commands:
      - echo "Configuring Docker..."
      - nohup dockerd &
      - sleep 5
      - docker info

  build:
    commands:
      - echo "Starting build..."
      # Retrieve the private key from s3 and write to file
      - aws s3 cp s3://caderneta-prod/lightsail_key /tmp/lightsail_key
      - aws s3 cp s3://caderneta-prod/.env .env
      - docker compose build --no-cache

  post_build:
    commands:
      - echo "Deploying to Lightsail..."

      - chmod 600 /tmp/lightsail_key
      - eval "$(ssh-agent -s)"
      - ssh-add /tmp/lightsail_key
      - ssh-add -l

    # Deploy
      - scp -i /tmp/lightsail_key -o StrictHostKeyChecking=no -vvv docker-compose.yml ${LIGHTSAIL_USERNAME}@${LIGHTSAIL_HOST}:~/caderneta/
      - scp -i /tmp/lightsail_key -o StrictHostKeyChecking=no -vvv Dockerfile ${LIGHTSAIL_USERNAME}@${LIGHTSAIL_HOST}:~/caderneta/
      - >
        ssh -i /tmp/lightsail_key -o StrictHostKeyChecking=no ${LIGHTSAIL_USERNAME}@${LIGHTSAIL_HOST} << 'EOF'
          set -e
          echo "Navigating to project directory..."
          cd ~/caderneta
          echo "Bringing down any existing containers..."
          docker compose down
          echo "Starting containers with no-cache option..."
          docker compose up --build -d
          echo "Pruning unused images..."
          docker image prune -f
          echo "Deployment completed successfully."
        EOF

      # Clean up
      - rm -rf /tmp/lightsail_key

artifacts:
  files:
    - docker-compose.yml
    - Dockerfile
    - '**/*'
